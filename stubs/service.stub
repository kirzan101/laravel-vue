<?php

namespace {{ namespace }};

use App\Helpers\Helper;
use App\Interfaces\{{ interface }};
use App\Traits\HttpErrorCodeTrait;
use App\Traits\ReturnModelCollectionTrait;
use App\Traits\ReturnModelTrait;
use App\Interfaces\CurrentUser;
use App\Interfaces\BaseInterface;
use App\Interfaces\FetchInterfaces\BaseFetchInterface;
use Illuminate\Support\Facades\DB;

class {{ class }} implements {{ interface }}
{
    use HttpErrorCodeTrait;
    use ReturnModelCollectionTrait;
    use ReturnModelTrait;

    public function __construct(
        private BaseInterface $base,
        private BaseFetchInterface $fetch,
        private CurrentUser $currentUser
    ) {
        //
    }

    /**
     * Store a new {{ description }} in the database.
     *
     * @param array $request
     * @return array
     */
    public function store{{ base }}(array $request): array
    {
        try {
            return DB::transaction(function () use ($request) {
                $profileId = $this->currentUser->getProfileId(); // current logged in profile

                // TODO: implement logic to store a {{ class }}

                // use this format in return
                // $this->returnModel(code, status, message, model, last_id);
                return $this->returnModel(201, Helper::SUCCESS, '{{ readable }} created successfully!', null, null);
            });
        } catch (\Throwable $th) {
            $code = $this->httpCode($th);
            return $this->returnModel($code, Helper::ERROR, $th->getMessage());
        }
    }

    /**
     * Update an existing {{ description }} in the database.
     *
     * @param array $request
     * @param int $id
     * @return array
     */
    public function update{{ base }}(array $request, int $id): array
    {
        try {
            return DB::transaction(function () use ($request, $id) {
                $profileId = $this->currentUser->getProfileId(); // current logged in profile

                // TODO: implement logic to update a {{ class }}

                // $this->returnModel(code, status, message, model, last_id);
                return $this->returnModel(200, Helper::SUCCESS, '{{ readable }} updated successfully!', null, null);
            });
        } catch (\Throwable $th) {
            $code = $this->httpCode($th);
            return $this->returnModel($code, Helper::ERROR, $th->getMessage());
        }
    }

    /**
     * Delete the given {{ description }} in the database.
     *
     * @param int $id
     * @return array
     */
    public function delete{{ base }}(int $id): array
    {
        try {
            return DB::transaction(function () use ($id) {
                $profileId = $this->currentUser->getProfileId(); // current logged in profile

                // TODO: implement logic to delete a {{ class }}

                // $this->returnModel(code, status, message, model, last_id);
                return $this->returnModel(204, Helper::SUCCESS, '{{ readable }} deleted successfully!', null, null);
            });
        } catch (\Throwable $th) {
            $code = $this->httpCode($th);
            return $this->returnModel($code, Helper::ERROR, $th->getMessage());
        }
    }
}
